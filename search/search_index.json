{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>A Flet extension using flutter_secure_storage.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install with pip: <pre><code>pip install flet-secure-storage\n</code></pre></p> <p>or with uv: <pre><code>uv add flet-secure-storage\n</code></pre></p>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>import flet as ft\n\nimport flet_secure_storage as fss\n\n\ndef main(page: ft.Page):\n\n    secure_storage = fss.SecureStorage() # Create an instance of secure_storage\n    page.services.append(secure_storage) # Add secure_storage to services\n\n    # API Calls here\n\n    page.add(\n        ft.Text(\"Quick Start\")\n    )\n\nft.run(main)\n</code></pre>"},{"location":"#initilize-class","title":"Initilize Class","text":"<pre><code>import flet_secure_storage as fss\n\nsecure_storage = fss.SecureStorage() # Create an instance of secure_storage\n\npage.services.append(secure_storage) # Add secure_storage to services\n</code></pre>"},{"location":"#api-reference","title":"API Reference","text":"<p>               Bases: <code>Service</code></p> <p>Create an instance of FlutterSecureStorage in Flet https://pub.dev/packages/flutter_secure_storage https://github.com/juliansteenbakker/flutter_secure_storage</p> <p>The functions used are to mirror the client_storage calls https://flet.dev/docs/cookbook/client-storage/</p>"},{"location":"#flet_secure_storage.SecureStorage.clear","title":"clear  <code>async</code>","text":"<pre><code>clear()\n</code></pre> <p>Clears all data from secure storage. From flutter_secure_storage: storage.deleteAll</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the storage was cleared successfully, False otherwise.</p> Source code in <code>src\\flet_secure_storage\\secure_storage.py</code> <pre><code>async def clear(self) -&gt; bool:\n    \"\"\"\n    Clears all data from secure storage.\n    From flutter_secure_storage: storage.deleteAll\n\n    Returns:\n        bool: True if the storage was cleared successfully, False otherwise.\n    \"\"\"\n    return await self._invoke_method(\"clear\")\n</code></pre>"},{"location":"#flet_secure_storage.SecureStorage.contains_key","title":"contains_key  <code>async</code>","text":"<pre><code>contains_key(key)\n</code></pre> <p>Checks if a key exists in secure storage. From flutter_secure_storage: storage.containsKey</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to check for existence.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the key exists, False otherwise.</p> Source code in <code>src\\flet_secure_storage\\secure_storage.py</code> <pre><code>async def contains_key(self, key: str) -&gt; bool:\n    \"\"\"\n    Checks if a key exists in secure storage.\n    From flutter_secure_storage: storage.containsKey\n\n    Args:\n        key (str): The key to check for existence.\n\n    Returns:\n        bool: True if the key exists, False otherwise.\n    \"\"\"\n    return await self._invoke_method(\"contains_key\", {\"key\": key})\n</code></pre>"},{"location":"#flet_secure_storage.SecureStorage.get","title":"get  <code>async</code>","text":"<pre><code>get(key)\n</code></pre> <p>Retrieves a value from secure storage. From flutter_secure_storage: storage.read</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to retrieve the value for.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The value associated with the key as a string, or None if not found.</p> Source code in <code>src\\flet_secure_storage\\secure_storage.py</code> <pre><code>async def get(self, key: str) -&gt; Optional[str]:\n    \"\"\"\n    Retrieves a value from secure storage.\n    From flutter_secure_storage: storage.read\n\n    Args:\n        key (str): The key to retrieve the value for.\n\n    Returns:\n        Optional[str]: The value associated with the key as a string, or None if not found.\n    \"\"\"\n    return await self._invoke_method(\"get\", {\"key\": key})\n</code></pre>"},{"location":"#flet_secure_storage.SecureStorage.get_keys","title":"get_keys  <code>async</code>","text":"<pre><code>get_keys(key_prefix)\n</code></pre> <p>Retrieves all keys from secure storage. From flutter_secure_storage: storage.readAll</p> <p>Parameters:</p> Name Type Description Default <code>key_prefix</code> <code>str</code> <p>The prefix to filter keys by.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: Returns a list of keys [:] of the values        that match the key_prefix or all keys if the user enters and        empty string or None Source code in <code>src\\flet_secure_storage\\secure_storage.py</code> <pre><code>async def get_keys(self, key_prefix: Optional[str]) -&gt; list[str]:\n    \"\"\"\n    Retrieves all keys from secure storage.\n    From flutter_secure_storage: storage.readAll\n\n    Args:\n        key_prefix (str): The prefix to filter keys by.\n\n    Returns:\n        list[str]: Returns a list of keys [&lt;key_prefix&gt;:&lt;value&gt;] of the values\n                   that match the key_prefix or all keys if the user enters and\n                   empty string or None\n    \"\"\"\n    key_prefix = key_prefix or \"\"\n    response: dict[str, str] = await self._invoke_method(\"get_keys\")\n\n    return [\n        f\"{key}:{value}\"\n        for key, value in response.items()\n        if key.startswith(key_prefix)\n    ]\n</code></pre>"},{"location":"#flet_secure_storage.SecureStorage.remove","title":"remove  <code>async</code>","text":"<pre><code>remove(key)\n</code></pre> <p>Deletes a key from the secure storage. From flutter_secure_storage: storage.delete</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to delete.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the key was deleted successfully, False otherwise.</p> Source code in <code>src\\flet_secure_storage\\secure_storage.py</code> <pre><code>async def remove(self, key: str) -&gt; bool:\n    \"\"\"\n    Deletes a key from the secure storage.\n    From flutter_secure_storage: storage.delete\n\n    Args:\n        key (str): The key to delete.\n\n    Returns:\n        bool: True if the key was deleted successfully, False otherwise.\n    \"\"\"\n    return await self._invoke_method(\"remove\", {\"key\": key})\n</code></pre>"},{"location":"#flet_secure_storage.SecureStorage.set","title":"set  <code>async</code>","text":"<pre><code>set(key, value)\n</code></pre> <p>Sets a value in secure storage. From flutter_secure_storage: storage.write</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>key name, used to retrieve the value</p> required <code>value</code> <code>Any</code> <p>value to store</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the value was stored successfully, False otherwise</p> Source code in <code>src\\flet_secure_storage\\secure_storage.py</code> <pre><code>async def set(self, key: str, value: Any) -&gt; bool:\n    \"\"\"\n    Sets a value in secure storage.\n    From flutter_secure_storage: storage.write\n\n    Args:\n        key (str): key name, used to retrieve the value\n        value (Any): value to store\n\n    Returns:\n        bool: True if the value was stored successfully, False otherwise\n    \"\"\"\n    assert value is not None\n    return await self._invoke_method(\"set\", {\"key\": key, \"value\": value})\n</code></pre>"}]}